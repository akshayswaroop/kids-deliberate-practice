import HomePage from './HomePage';
import React from 'react';

const dummyUsers = {
  alice: { words: {}, sessions: {}, settings: { languages: ['english'] } },
  bob: { words: {}, sessions: {}, settings: { languages: ['kannada'] } },
};

const dummyChoices = Array.from({ length: 12 }).map((_, i) => ({ id: String(i + 1), label: `word${i + 1}`, progress: (i * 7) % 101 }));

const meta = {
  title: 'App/HomePage',
  component: HomePage,
  tags: ['autodocs'],
  argTypes: {
    sessionSize: { control: { type: 'select' }, options: [3,6,9,12] },
  },
  parameters: {
    docs: {
      // Short component description used in Docs tab
      description: {
        component: 'HomePage composes ProfileForm, ModeSelector and PracticePanel into three layout variants (topbar, sidebar, center). Use `sessionSize` to control how many items a session contains. The story renders simplified dummy data for UI testing.'
      },
      // Provide a concise summary for the ArgsTable
      source: { type: 'auto' },
    },
  },
};

const sharedArgTypes = {
  users: { control: null, table: { type: { summary: 'Record<string, UserState>' }, defaultValue: { summary: 'alice, bob' } } },
  currentUserId: { control: null, table: { type: { summary: 'string | null' }, defaultValue: { summary: 'alice' } } },
  onCreateUser: { action: 'onCreateUser', table: { type: { summary: '(username: string) => void' }, defaultValue: { summary: '-' } } },
  onSwitchUser: { action: 'onSwitchUser', table: { type: { summary: '(userId: string) => void' }, defaultValue: { summary: '-' } } },
  onSetMode: { action: 'onSetMode', table: { type: { summary: '(mode: string) => void' }, defaultValue: { summary: '-' } } },
  onCorrect: { action: 'onCorrect', table: { type: { summary: '() => void' }, defaultValue: { summary: '-' } } },
  onWrong: { action: 'onWrong', table: { type: { summary: '() => void' }, defaultValue: { summary: '-' } } },
  choices: { control: null, table: { type: { summary: 'Array<{ id, label, progress }>' }, defaultValue: { summary: '12 items' } } },
  mainWord: { table: { type: { summary: 'string' }, defaultValue: { summary: 'cat' } } },
  mode: { table: { type: { summary: 'string' }, defaultValue: { summary: 'english' } } },
  sessionSize: { control: { type: 'select' }, options: [3,6,9,12], table: { type: { summary: 'number' }, defaultValue: { summary: 6 } } },
  sessionId: { table: { type: { summary: 'string' }, defaultValue: { summary: 'storybook' } } },
  transliteration: { table: { type: { summary: 'string' }, defaultValue: { summary: '-' } } },
  onSetSessionSize: { action: 'onSetSessionSize', table: { type: { summary: '(n: number) => void' }, defaultValue: { summary: '-' } } },
};

// Attach these to the default export so ArgsTable shows nicer metadata
meta.argTypes = Object.assign({}, meta.argTypes || {}, sharedArgTypes);

export default meta;

const baseProps = {
  users: dummyUsers,
  currentUserId: 'alice',
  onCreateUser: () => {},
  onSwitchUser: () => {},
  onSetMode: () => {},
  mode: 'english',
  mainWord: 'cat',
  choices: dummyChoices,
  onCorrect: () => {},
  onWrong: () => {},
};

// Provide default args at meta level so Storybook's ArgsTable and autogenerated stories
// don't try to render the component with missing required props.
meta.args = { ...baseProps, sessionSize: 6, sessionId: 'storybook' };

const Template = (args, { updateArgs }) => {
  // Build choices dynamically based on sessionSize so the story reflects the selector
  const choices = (dummyChoices || []).slice(0, args.sessionSize || 6);
  // Provide an onSetSessionSize handler that updates the story args so in-component
  // interactions update the rendered props and controls.
  const handleSetSessionSize = (n) => {
    updateArgs({ sessionSize: n });
  };
  return <HomePage {...args} choices={choices} onSetSessionSize={handleSetSessionSize} />;
};

export const TopBar = Template.bind({});
TopBar.args = { ...baseProps, sessionSize: 6, sessionId: 'storybook' };
TopBar.parameters = { docs: { story: { description: 'Topbar layout: this story matches the app â€” header across the top, user/profile controls, mode selector, and the practice panel.' } } };

